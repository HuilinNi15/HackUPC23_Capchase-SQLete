-- Global variables
local target = nil
local cooldowns = {0, 0, 0}
--Allies
local allies = {}

-- Define a Point class with x and y coordinates
Point = {}
function Point:new(x, y)
    local p = {x = x, y = y}
    setmetatable(p, self)
    self.__index = self
    return p
end

-- Calculate the distance between two points
function pointDistance(p1, p2)
    local dx = p2.x - p1.x
    local dy = p2.y - p1.y
    return math.sqrt(dx^2 + dy^2)
end


-- Define a Line class with a point and a direction vector
Line = {}
function Line:new(point, directionVector)
    local l = {point = point, directionVector = directionVector}
    setmetatable(l, self)
    self.__index = self
    return l
end

-- Define a method to calculate the perpendicular line passing through a point
function Line:perpendicular(point)
    local dx = self.directionVector.y
    local dy = -self.directionVector.x
    local directionVector = Point:new(dx, dy)
    return Line:new(point, directionVector)
end

-- Define a method to calculate the intersection point of two lines
function intersection(line1, line2)
    local x1, y1 = line1.point.x, line1.point.y
    local x2, y2 = line2.point.x, line2.point.y
    local dx1, dy1 = line1.directionVector.x, line1.directionVector.y
    local dx2, dy2 = line2.directionVector.x, line2.directionVector.y
    
    local det = dx1 * dy2 - dx2 * dy1
    if det == 0 then
        return nil  -- The lines are parallel
    end
    
    local t1 = (dy2 * (x1 - x2) - dx2 * (y1 - y2)) / det
    local t2 = (dy1 * (x1 - x2) - dx1 * (y1 - y2)) / det
    
    local x = x1 + dx1 * t1
    local y = y1 + dy1 * t1
    
    return Point:new(x, y)
end

function fartherAlongLine(point1, point2, lineStart, lineDirection) -- returns true if point1 is farther along the line than point2
    local vecToPoint1 = point1:subtract(lineStart)
    local vecToPoint2 = point2:subtract(lineStart)
    local dotProduct1 = vecToPoint1:dot(lineDirection)
    local dotProduct2 = vecToPoint2:dot(lineDirection)
    return dotProduct1 >= dotProduct2 

end

-- Function to check for intersection between a circle and a line
-- Returns true if there is an intersection, false otherwise
function intersectionCircle(line, circleCenter)
    -- Find the distance from the center of the circle to the line
    local distance = math.abs(line.a * circleCenter.x + line.b * circleCenter.y + line.c) / math.sqrt(line.a * line.a + line.b * line.b)
  
    -- If the distance is greater than the radius of the circle, there is no intersection
    if distance > 1 then
      return false
    end
  
    -- Otherwise, there is an intersection
    return true
  end


function bulletTooFar(me, bulletPosition, bulletTrajectory)
    mePosition = me:pos()
    perpendicular = bulletTrajectory:perpendicular(mePosition)
    intersectionPoint = intersection(bulletTrajectory, perpendicular)
    if pointDistance(bulletPosition, intersectionPoint) < 4 * pointDistance(mePosition, intersectionPoint)  then
        return true
    else
        return false
end

function bulletPast(me, bulletPosition, bulletTrajectory)
    mePosition = me:pos()
    perpendicular = bulletTrajectory:perpendicular(mePosition)
    intersectionPoint = intersection(bulletTrajectory, perpendicular)
    if fartherAlongLine(bulletPosition, intersectionPoint) then
        return true
    else
        return false
end

function purgeBullets(bullets)
    for i = 1, #bullets do
        if bulletTooFar(me, bullets[i].position, bullets[i].trajectory) or bulletPast(me, bullets[i].position, bullets[i].trajectory) then
            table.remove(bullets, i)
        end    
    end
end

function checkViablePosition(position, bullets) -- returns true if no intersect with bullet path, false otherwise
    local changePosition = false
    for i = 1, #bullets do
        if intersectionCircle(bullets[i].trajectory, position) then
            return false
        end
    end
    return true
end

-- Initialize bot
function bot_init(me)

end

-- Main bot function
function bot_main(me)
local me_pos = me:pos()

-- Update cooldowns
for i = 1, 3 do
    if cooldowns[i] > 0 then
        cooldowns[i] = cooldowns[i] - 1
    end
end

-- Attack logic
local closest_enemy = nil
local min_distance = math.huge
for _, player in ipairs(me:visible()) do
    local dist = vec.distance(me_pos, player:pos())
    if dist < min_distance then
        min_distance = dist
        local attack = true
        for _, ally in ipairs(allies) do
            if _:visible():id() == ally:visible():id() do
                attack = false
            end
        end
        closest_enemy = player
    end
end

-- If enemy is within range, melee, otherwise, projectile
-- Set target to closest visible enemy
local target = closest_enemy
if target then
    --local direction = {target:pos():sub(me_pos)}
    -- If target is within melee range and melee attack is not on cooldown, use melee attack
    if min_distance <= 2 and cooldowns[3] == 0 then
        me:cast(2, direction)
        cooldowns[3] = 50
        -- If target is not within melee range and projectile is not on cooldown, use projectile
    elseif cooldowns[1] == 0 then

        me:cast(0, direction)
        cooldowns[1] = 1
    end
    -- Move towards the center
    local direction = {250, 250}
    me:move(direction)
end